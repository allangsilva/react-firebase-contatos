{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","timeout","withCredentials","headers","Access-Control-Allow-Origin","Content-Type","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveContato","contato","state","post","name","then","res","console","log","data","catch","err","get","result","evt","setState","target","value","_this2","react_default","a","createElement","className","type","style","paddingTop","paddingBottom","paddingLeft","paddingRight","marginBottom","marginTop","onChange","handleChange","bind","cursor","onClick","rel","contatos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAKMA,SAAMC,IAAMC,OAAO,CACvBC,QAAS,kEACTC,QAAS,UACTC,iBAAiB,EACjBC,QAAS,CACPC,8BAA+B,IAC/BC,eAAgB,uBAmFLC,cA7Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA0BRQ,YAAc,WAAM,IAEVC,EAAYR,EAAKS,MAAjBD,QAERnB,EAAIqB,KAAJ,iBAA2B,CAAEC,KAAOH,IACjCI,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIG,QAEjBC,MAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,KAE5B7B,EAAI8B,IAAI,iBACLP,KAAK,SAAAQ,GAAM,OAAIN,QAAQC,IAAIK,KAC3BH,MAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,MAtC5BlB,EAAKS,MAAQ,CACXD,QAAU,IAHKR,6EAoBjBc,QAAQC,IAAI,4DAGDM,GACXlB,KAAKmB,SAAS,CAAEd,QAAUa,EAAIE,OAAOC,yCAoB9B,IAAAC,EAAAtB,KACP,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAO,CACxBC,WAAa,GACbC,cAAgB,GAChBC,YAAa,GACbC,aAAc,GACdC,aAAc,GACdC,UAAW,IAEZb,MAAOrB,KAAKM,MAAMD,QAAS8B,SAAUnC,KAAKoC,aAAaC,KAAKrC,QAE7DuB,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVE,MAAO,CACLU,OAAQ,WAEVC,QAAS,kBAAMjB,EAAKlB,eACpBgB,OAAO,SACPoB,IAAI,uBAPN,UAWCxC,KAAKyC,4CA9DZ,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,+BAhBUiB,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.ac889ede.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nconst api = axios.create({\n  baseURL: 'https://us-central1-react-firebase-contatos.cloudfunctions.net/', \n  timeout: 999999999,\n  withCredentials: true,\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Content-Type': 'application/json',\n  }\n});\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      contato : ''\n    }\n  }\n\n  get contatos() {\n    return (\n      <div>\n        <p>CONTATO 01</p>\n        <p>CONTATO 01</p>\n        <p>CONTATO 01</p>\n        <p>CONTATO 01</p>\n        <p>CONTATO 01</p>\n      </div>\n    )\n  }\n\n  saveContato() {\n    console.log(\"Salvando contato...\")\n  }\n\n  handleChange(evt) {\n    this.setState({ contato : evt.target.value })\n  }\n\n  saveContato = () => {\n\n    const { contato } = this.state;\n    \n    api.post(`/services-save`, { name : contato })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n      .catch(err => console.log(err))\n\n    api.get('/services-get')\n      .then(result => console.log(result))\n      .catch(err => console.log(err))\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <code> Adicione contatos </code>\n          <input type=\"text\" style={{ \n            paddingTop : 10,\n            paddingBottom : 10,\n            paddingLeft: 30,\n            paddingRight: 30,\n            marginBottom: 10,\n            marginTop: 10\n           }}\n           value={this.state.contato} onChange={this.handleChange.bind(this)}\n           />\n          <a\n            className=\"App-link\"\n            style={{\n              cursor: 'pointer'\n            }}\n            onClick={() => this.saveContato()}            \n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Salvar\n          </a>\n          {this.contatos}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}